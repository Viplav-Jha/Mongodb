> show dbs
admin        0.000GB
config       0.000GB
demo         0.000GB
demoproject  0.000GB
local        0.000GB
nsecomDb     0.000GB
test         0.000GB
---------------------------------------------------------------------
use db // enterinto db
show collections
demodata

> db.demodata.insertOne({name:"javascript",type:"font-end",video:5,active:true})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("608ff03c85e616824381f1d8")
}

// db.demodata.insertMany([{name:"javascript",type:"font-end",video:5,active:true},{name:"javascript",type:"font-end",video:5,active:true}])


> db.demodata.find().pretty()
{
        "_id" : ObjectId("608fe009a649ec946a1231fb"),
        "name" : "reactjs",
        "type" : "font-end",
        "videos" : 80,
        "active" : false
}
{
        "_id" : ObjectId("608fe68b85e616824381f1d5"),
        "name" : "mongodb",
        "type" : "db",
        "video" : 5,
        "active" : true
}
{
        "_id" : ObjectId("608fe73e85e616824381f1d6"),
        "name" : "java",
        "type" : "font-end",
        "video" : 15,
        "active" : false
}
{
        "_id" : ObjectId("608ff03c85e616824381f1d8"),
        "name" : "javascript",
        "type" : "font-end",
        "video" : 5,
        "active" : true
}
-----------------------------------------------------------------------------------------------------------------------------
> db.demodata.updateOne({name:"java"} , {$set: {type:"font-end"} })
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 0 }

db.demodata.updateMany({type:"font-end"}, {$set:{active:false}}) 

//Projection
> db.demodata.find({name:"mongodb"},{name:0}).pretty() 


-------------------------------------------------------------------------------------------------------------------------------



> db.demodata.find({name:"mongodb"},{name:1}).pretty()
{ "_id" :ObjectId("608fe68b85e616824381f1d5"), "name" : "mongodb" }
>     
//Delete
 db.collection.deleteMany({type:"Back-end"})
{ "acknowledged" : true, "deletedCount" : 0 }


 db.collection.deleteMany({}) // all document deleted from collection(Tables)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const mongoose = require("mongoose");
 // connection creation and certain a new db
mongoose.connect("mongodb://localhost:27017/demo",{useNewUrlParser:true,useUnifiedTopology:true}).
then(()=>console.log("connection established"))
.catch((err)=>console.log("err"));

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


const mongoose =require("mongoose")
mongoose.connect("mongodb://localhost:27017/viplavtest",{useNewUrlParser:true , useUnifiedTopology:true} )
.then(()=>console.log("connection established")).catch((err)=>console.log(err))

// Mangoose define a structure of schema 
// default value and variables etc...
const ReactSchema = new mongoose.Schema({
  name:{
      type:String ,
      required:true
    } ,
  ctype : String,
  likes : Number,
  author: String , 
  active :Boolean ,
 date :{
      type:Date,
      default:Date.now
  }
})
// create collection 
const playlists =new mongoose.model("Playlist",ReactSchema)
//create document or insert                                          
const createDocument = async ()=>{
    try {
   const reactPlaylists = new playlists({
    name : "ReactJs",
    ctype : "Front-end",
    likes : 25,
    author: "Viplav" , 
    active :true 
})
const result = await reactPlaylists.save()
 console.log(result)
}
catch(err) {
    console.log(err)
}
}
createDocument();
